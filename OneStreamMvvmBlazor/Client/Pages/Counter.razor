@page "/counter"
@inherits MvvmComponentBase<CounterViewModel>
@*@inject ClockViewModel ClockViewModel*@

<h1>Counter</h1>

<div style="margin: 20px 0; padding: 10px; background-color: #F0F0F0; font-size: .85rem;">
	The view model gets auto injected and can be accessed with the property <pre style="display: inline">BindingContext</pre>.
    You can use this property to bind event handlers on your controls.
</div>

<p style="margin-top: 20px;">Current count: @Bind(x => x.CurrentCount)</p>

<button class="btn btn-primary" @onclick="@BindingContext.IncrementCount">Click me</button>

<div style="margin: 20px 0; padding: 10px; background-color: #F0F0F0; font-size: .85rem;">
	You can also bind additional view models that you simply inject by yourself.
    The lifecycle methods on such view models will not be invoked by this component.
</div>

@*<div style="padding: 10px; background-color: #F0F0F0; font-size: .85rem;">
	Current time: @Bind(ClockViewModel, x => x.DateTime)
</div>*@